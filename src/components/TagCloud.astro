---
import { getCollection } from "astro:content";

// Define an interface for tag counts
interface TagCounts {
  [key: string]: number;
}

export interface Props {
  sortBy?: 'count' | 'alphabetical';
}

const { sortBy = 'alphabetical' } = Astro.props;

const allStories = (await getCollection("stories"))
  .filter((post) => !post.data.draft);

// Extract all unique tags and count occurrences
const tagCounts = allStories.reduce((acc: TagCounts, post) => {
  if (post.data.tags) {
    post.data.tags.forEach((tag) => {
      if (!acc[tag]) {
        acc[tag] = 0;
      }
      acc[tag]++;
    });
  }
  return acc;
}, {} as TagCounts);

// Convert to array and sort based on prop
const sortedTags = Object.entries(tagCounts)
  .map(([tag, count]) => ({ tag, count }))
  .sort((a, b) => {
    if (sortBy === 'count') {
      return b.count - a.count;
    }
    return a.tag.localeCompare(b.tag);
  });
---

<div class="tags-grid">
  {
    sortedTags.map((tagInfo) => (
      <a href={`/tags/${tagInfo.tag}`} class="tag-item">
        <span class="tag-name">{tagInfo.tag}</span>
        <span class="tag-count">{tagInfo.count}</span>
      </a>
    ))
  }
</div>

<style>
  .tags-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: flex-start;
    margin: 1rem 0;
  }

  .tag-item {
    display: block;
    position: relative;
    background: var(--color-background-alt);
    padding: 0.25rem 0.75rem;
    border-radius: 3px;
    transition:
      background-color 0.2s ease,
      color 0.2s ease;
  }

  .tag-item:hover {
    background: var(--color-link);
    color: var(--color-background);
  }

  .tag-count {
    position: absolute;
    top: -8px;
    right: -8px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--color-link);
    color: var(--color-background);
    font-size: 0.7em;
    min-width: 1.5em;
    height: 1.5em;
    border-radius: 50%;
    padding: 0 0.25rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    transition:
      background-color 0.2s ease,
      color 0.2s ease;
  }
</style>
